package de.schuermann.interactivedata.api.chart.definitions;

import de.schuermann.interactivedata.api.chart.data.ChartData;
import de.schuermann.interactivedata.api.chart.definitions.operations.FilterInfo;
import de.schuermann.interactivedata.api.chart.definitions.operations.OperationInfo;
import de.schuermann.interactivedata.api.data.source.DataSource;

import java.util.ArrayList;
import java.util.List;

/**
 * Generic definition of a chart. Base definition that every specific chart definition must extend.
 * <p>
 * Charts must at least have a name and a {@link DataSource}.
 * <p>
 * {@link AbstractDimension Dimensions} specify the data to extract for visualization. This is based on the type of the chart.
 * <p>
 * {@link FilterInfo Filters} provide the ability to filter data out based on criteria specified in the definition or per request.
 * {@link OperationInfo Operations} provide the ability to do data optimization. Optimization is based on grouping and aggregation.
 * {@link FilterInfo Filters} and {@link OperationInfo Operations} are optional. When they are not defined
 * that data will not be optimized in any way.
 * <p>
 * A {@link ChartPostProcessor} can be defined to do further optimation of the data after it is generated by the
 * framework.
 *
 * @author Philipp Sch&uuml;rmann
 */
public abstract class AbstractChartDefinition<T extends AbstractDimension, D extends ChartData> {

    private String name;
    private Class<? extends DataSource> dataSource;
    private ChartPostProcessor<D> chartPostProcessor;
    private List<T> dimensions = new ArrayList<>();
    private List<FilterInfo> filters = new ArrayList<>();
    private List<OperationInfo> operations = new ArrayList<>();

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Class<? extends DataSource> getDataSource() {
        return dataSource;
    }

    public void setDataSource(Class<? extends DataSource> dataSource) {
        this.dataSource = dataSource;
    }

    public List<T> getDimensions() {
        return dimensions;
    }

    public void setDimensions(List<T> dimensions) {
        this.dimensions = dimensions;
    }

    protected void addDimension(T dimension) {
        dimensions.add(dimension);
    }

    public ChartPostProcessor<D> getChartPostProcessor() {
        return chartPostProcessor;
    }

    public void setChartPostProcessor(ChartPostProcessor<D> chartPostProcessor) {
        this.chartPostProcessor = chartPostProcessor;
    }

    public List<FilterInfo> getFilters() {
        return filters;
    }

    public void setFilters(List<FilterInfo> filters) {
        this.filters = filters;
    }

    public List<OperationInfo> getOperations() {
        return operations;
    }

    public void setOperations(List<OperationInfo> operations) {
        this.operations = operations;
    }

    public void addFilter(FilterInfo filterInfo) {
        filters.add(filterInfo);
    }

    public void addOperation(OperationInfo operationInfo) {
        operations.add(operationInfo);
    }

    @Override
    public String toString() {
        String dataSourceName = "null";
        if(dataSource != null) {
            dataSourceName = dataSource.getSimpleName();
        }
        String chartPostProcessorName = "null";
        if(chartPostProcessor != null) {
            chartPostProcessorName = chartPostProcessor.getClass().getSimpleName();
        }
        return "AbstractChartDefinition{" +
                "name='" + name + '\'' +
                ", dataSource=" + dataSourceName +
                ", chartPostProcessor=" + chartPostProcessorName +
                '}';
    }
}
