{"name":"Interactive Data Framework","tagline":"Java framework for easy creation of (RESTful-)APIs for interactive visualizations","body":"# InteractiveData\r\nJava framework for easy creation of (RESTful-)APIs for interactive visualizations.\r\n\r\nInteractiveData is developed by Philipp Sch&uuml;rmann for his Master Thesis at University of Hamburg.\r\nThe complete document will be provided here after it is finished.\r\n\r\n[Sample Project on Heroku](https://interactive-data.herokuapp.com/)\r\n\r\n## Project Structure\r\nInteractiveData is divided into multiple modules. See the table below for more information on every module:\r\n```\r\n. InteractiveData\r\n├── interactive-data-core\r\n|     Core framework with basic functionality\r\n├── interactive-data-processors\r\n|     Annotation Processors for JSR 269 Service Locator\r\n├── interactive-data-spring\r\n|     Integration module for Spring Framework\r\n└── interactive-data-spring-boot-starter\r\n      Starter Template for easy start with Spring Boot\r\n```\r\n\r\n## Usage\r\nThe following code snippets will show the basic usage of InteractiveData. For additional information see the [Sample \r\nApp](https://github.com/MrGoro/interactive-data-sample) or JavaDoc.\r\n\r\n### Maven Dependency\r\nUntil the release of the first stable version, InteractiveData cannot deploy to Maven Central. \r\nSnapshot releases are deployed to OSSRH Snapshot Repository. Add the snapshot repository to your maven project by\r\nadding the following to your pom.xml:\r\n```\r\n<repositories>\r\n    <repository>\r\n        <id>ossrh.sonatype.snapshots.deploy</id>\r\n        <name>OSSRH snapshot repository</name>\r\n        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\r\n        <snapshots>\r\n            <enabled>true</enabled>\r\n        </snapshots>\r\n    </repository>\r\n</repositories>\r\n```\r\n\r\n### Core Framework\r\nThe core framework will provide basic functionality. It enables you to define charts and create filters and operations.\r\nThough the core will NOT provide an API on its own. Use one of the integration modules to integrate the framework\r\ninto your environment. Add the following dependency to your Maven project:\r\n```\r\n<dependency>\r\n    <groupId>com.github.mrgoro</groupId>\r\n    <artifactId>interactive-data-core</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot\r\nInteractive Data has a starter template for an easy start with Spring Boot. This will auto configure\r\neverything for direct start. Add the following dependency to your Spring Boot project:\r\n```\r\n<dependency>\r\n    <groupId>com.github.mrgoro</groupId>\r\n    <artifactId>interactive-data-spring-boot-starter</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\nTo start a new project from scatch use [start.spring.io](https://start.spring.io/) to initialize a Spring Boot project.\r\n\r\n### Define Charts\r\nInteractive Data uses annotations to define charts whose data is than exposed over an API. The following example shows\r\na very basic definition of a chart for visualizing climate data.\r\n```\r\n@ChartService(\"sensor\")\r\npublic class SensorCharts {\r\n\r\n    @Chart(\r\n        name = \"temperature\",\r\n        dataSource = TemperatureDataSource.class,\r\n        filter = @FilterDef(\r\n            filter = SearchFilter.class,\r\n            fieldName = \"stationId\",\r\n            fieldClass = Long.class\r\n        )\r\n    )\r\n    @LineChart(\r\n        axis = {\r\n            @Axis(\r\n                dataField = \"time\",\r\n                dataType = Date.class,\r\n                type = Axis.Type.X,\r\n                filter = TimeFilter.class,\r\n                granularity = TimeGranularity.class\r\n            ),\r\n            @Axis(\r\n                dataField = \"temperature\",\r\n                dataType = Double.class,\r\n                type = Axis.Type.Y,\r\n                functions = Average.class\r\n            )\r\n        }\r\n    )\r\n    public LineChartData temperature(LineChartData data) {\r\n        // Further enhance data before sending\r\n        return data;\r\n    }\r\n}\r\n```\r\n\r\n## Wiki\r\nYou can find more information on using and developing with Interactive Data in the wiki. See some examples below:\r\n\r\n* [Integrate Framework](wiki/Integrate-Framework)\r\n* [Define Charts](wiki/Define-Charts)\r\n* [Data Source](wiki/Data-Source)\r\n\r\n\r\n## License\r\nThe InteractiveData framework is released under the [MIT License](http://opensource.org/licenses/MIT).","google":"UA-50190529-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
